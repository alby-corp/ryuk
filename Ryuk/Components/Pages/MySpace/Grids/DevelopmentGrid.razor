@using Ryuk.Extensions
@using Ryuk.Components.Pages.MySpace.Actions
@using System.Globalization
@if (Issues is null || _items is null)
{
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
    </MudStack>
    return;
}

<MudDataGrid @ref="grid" T="DevelopmentModel" Items="@_items" Dense="true"
             EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual" ReadOnly="@false" CommittedItemChanges="CommittedItemChanges">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Development Issues</MudText>
    </ToolBarContent>
    <Columns>

        <TemplateColumn Title="Type" SortBy="model => model.Type" IsEditable="false">
            <CellTemplate>
                <MudImage Src="@context.Item.TypeIconUrl"/>
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Status" SortBy="model => model?.Status ?? string.Empty" IsEditable="false">
            <CellTemplate>
                <MudChip Variant="Variant.Outlined" Color="@context.Item.StatusColor">@context.Item.Status</MudChip>
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Key" SortBy="model => model.Key" IsEditable="false">
            <CellTemplate>
                <MudBreadcrumbs Items="@context.Item.Breadcrumbs">
                    <ItemTemplate Context="item">
                        <MudLink Href="@item.Href">@item.Text</MudLink>
                    </ItemTemplate>
                </MudBreadcrumbs>
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Summary" SortBy="model => model.Summary">
            <CellTemplate>
                @context.Item.Summary
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Start Date" Property="model => model.StartDate" Format="d" Culture="CultureInfo.CurrentCulture" SortBy="model => model.StartDate ?? DateTime.MinValue">
            <CellTemplate>
                @context.Item.StartDate
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Due Date" Property="model => model.DueDate" Format="d" Culture="CultureInfo.CurrentCulture" SortBy="model => model.DueDate ?? DateTime.MinValue">
            <CellTemplate>
                @context.Item.DueDate
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Original Estimate" Property="model => model.OriginalEstimate" SortBy="model => model.OriginalEstimateInSeconds" IsEditable="false">
            <CellTemplate>
                @context.Item.OriginalEstimate
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Time Spent" Property="model => model.TimeSpent" SortBy="model => model.TimeSpentInSeconds" IsEditable="false">
            <CellTemplate>
                @context.Item.TimeSpent
            </CellTemplate>
        </TemplateColumn>

        <PropertyColumn Title="Remaining Estimate" Property="model => model.RemainingEstimate" SortBy="model => model.RemainingEstimateInSeconds" Required>
            <EditTemplate>
                <MudTextField Label="Remaining Estimate"
                              AutoGrow="false"
                              For="@(() => context.Item.RemainingEstimate)"
                              @bind-Value="@context.Item.RemainingEstimate" Variant="Variant.Text"
                              Adornment="Adornment.End" AdornmentText="00m 00h 00d"
                              ErrorText="Incorrect value (00m 00h 00d)"
                              Required RequiredError="Provide a Remaining Estimate"/>
            </EditTemplate>
        </PropertyColumn>

        <TemplateColumn Title="Errors" Sortable="false" IsEditable="false">
            <CellTemplate>
                <MudList Clickable="@false" Dense="@true" DisableGutters="@true">
                    @foreach (var error in context.Item.Errors)
                    {
                        <MudListItem Text="@error.Message" IconColor="@error.Color" Class="@error.ColorClass" Icon="@error.Icon"/>
                    }
                </MudList>
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn Title="Actions" Sortable="false" IsEditable="false">
            <CellTemplate>
                <MudStack Row Justify="Justify.FlexEnd" AlignItems="AlignItems.End">
                    <CascadingValue Value="@Issues.GetByKey(context.Item.Key)">
                        <CascadingValue Value="@context.Item.HasErrors">
                            <ActionButtons/>
                        </CascadingValue>
                    </CascadingValue>
                    <MudButton Variant="Variant.Outlined" OnClick="@context.Actions.StartEditingItemAsync">Edit</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>

    </Columns>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 5, 10, 15, 20 })"/>
    </PagerContent>
</MudDataGrid>